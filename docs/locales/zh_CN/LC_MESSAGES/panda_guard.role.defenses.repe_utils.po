# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, Floyed Shen, etc.
# This file is distributed under the same license as the Panda-Guard
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Panda-Guard \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-12 08:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/panda_guard.role.defenses.repe_utils.rst:2
msgid "panda\\_guard.role.defenses.repe\\_utils package"
msgstr ""

#: ../../source/panda_guard.role.defenses.repe_utils.rst:5
msgid "Submodules"
msgstr ""

#: ../../source/panda_guard.role.defenses.repe_utils.rst:8
msgid "panda\\_guard.role.defenses.repe\\_utils.pipelines module"
msgstr ""

#: ../../source/panda_guard.role.defenses.repe_utils.rst:16
msgid "panda\\_guard.role.defenses.repe\\_utils.rep\\_control\\_pipeline module"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_control_pipeline.RepControlPipeline:1
msgid ""
"Bases: "
":py:class:`~transformers.pipelines.text_generation.TextGenerationPipeline`"
msgstr ""

#: ../../source/panda_guard.role.defenses.repe_utils.rst:24
msgid ""
"panda\\_guard.role.defenses.repe\\_utils.rep\\_control\\_reading\\_vec "
"module"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_control_reading_vec.WrappedBlock:1
#: panda_guard.role.defenses.repe_utils.rep_control_reading_vec.WrappedReadingVecModel:1
msgid "Bases: :py:class:`~torch.nn.modules.module.Module`"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_control_reading_vec.WrappedBlock.forward:1
#: panda_guard.role.defenses.repe_utils.rep_control_reading_vec.WrappedReadingVecModel.forward:1
msgid "Define the computation performed at every call."
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_control_reading_vec.WrappedBlock.forward:3
#: panda_guard.role.defenses.repe_utils.rep_control_reading_vec.WrappedReadingVecModel.forward:3
msgid "Should be overridden by all subclasses."
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_control_reading_vec.WrappedBlock.forward:6
#: panda_guard.role.defenses.repe_utils.rep_control_reading_vec.WrappedReadingVecModel.forward:6
msgid ""
"Although the recipe for forward pass needs to be defined within this "
"function, one should call the :class:`Module` instance afterwards instead"
" of this since the former takes care of running the registered hooks "
"while the latter silently ignores them."
msgstr ""

#: ../../source/panda_guard.role.defenses.repe_utils.rst:32
msgid "panda\\_guard.role.defenses.repe\\_utils.rep\\_readers module"
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.ClusterMeanRepReader:1
#: panda_guard.role.defenses.repe_utils.rep_readers.PCARepReader:1
#: panda_guard.role.defenses.repe_utils.rep_readers.RandomRepReader:1
msgid ""
"Bases: "
":py:class:`~panda_guard.role.defenses.repe_utils.rep_readers.RepReader`"
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.ClusterMeanRepReader:1
msgid ""
"Get the direction that is the difference between the mean of the positive"
" and negative clusters."
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_readers.ClusterMeanRepReader.get_rep_directions:1
#: panda_guard.role.defenses.repe_utils.rep_readers.RandomRepReader.get_rep_directions:1
#: panda_guard.role.defenses.repe_utils.rep_readers.RepReader.get_rep_directions:1
msgid "Get concept directions for each hidden layer of the model"
msgstr ""

#: ../../source/panda_guard.role.defenses.repe_utils.rst
msgid "Parameters"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_readers.ClusterMeanRepReader.get_rep_directions:3
#: panda_guard.role.defenses.repe_utils.rep_readers.RandomRepReader.get_rep_directions:3
#: panda_guard.role.defenses.repe_utils.rep_readers.RepReader.get_rep_directions:3
msgid "Model to get directions for"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_readers.ClusterMeanRepReader.get_rep_directions:4
#: panda_guard.role.defenses.repe_utils.rep_readers.RandomRepReader.get_rep_directions:4
#: panda_guard.role.defenses.repe_utils.rep_readers.RepReader.get_rep_directions:4
msgid "Tokenizer to use"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_readers.ClusterMeanRepReader.get_rep_directions:5
#: panda_guard.role.defenses.repe_utils.rep_readers.PCARepReader.get_signs:10
#: panda_guard.role.defenses.repe_utils.rep_readers.RandomRepReader.get_rep_directions:5
#: panda_guard.role.defenses.repe_utils.rep_readers.RepReader.get_rep_directions:5
#: panda_guard.role.defenses.repe_utils.rep_readers.RepReader.get_signs:10
msgid "Hidden states of the model on the training data (per layer)"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_readers.ClusterMeanRepReader.get_rep_directions:6
#: panda_guard.role.defenses.repe_utils.rep_readers.PCARepReader.get_signs:12
#: panda_guard.role.defenses.repe_utils.rep_readers.RandomRepReader.get_rep_directions:6
#: panda_guard.role.defenses.repe_utils.rep_readers.RepReader.get_rep_directions:6
#: panda_guard.role.defenses.repe_utils.rep_readers.RepReader.get_signs:12
msgid "Layers to consider"
msgstr ""

#: ../../source/panda_guard.role.defenses.repe_utils.rst
msgid "Returns"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_readers.ClusterMeanRepReader.get_rep_directions:8
#: panda_guard.role.defenses.repe_utils.rep_readers.RandomRepReader.get_rep_directions:8
#: panda_guard.role.defenses.repe_utils.rep_readers.RepReader.get_rep_directions:8
msgid "A dict mapping layers to direction arrays (n_components, hidden_size)"
msgstr ""

#: ../../source/panda_guard.role.defenses.repe_utils.rst
msgid "Return type"
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.PCARepReader:1
msgid "Extract directions via PCA"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_readers.PCARepReader.get_rep_directions:1
msgid "Get PCA components for each layer"
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.PCARepReader.get_signs:1
#: panda_guard.role.defenses.repe_utils.rep_readers.RepReader.get_signs:1
msgid ""
"Given labels for the training data hidden_states, determine whether the "
"negative or positive direction corresponds to low/high concept (and "
"return corresponding signs -1 or 1 for each layer and component index)"
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.PCARepReader.get_signs:5
#: panda_guard.role.defenses.repe_utils.rep_readers.RepReader.get_signs:5
msgid ""
"NOTE: This method assumes that there are 2 entries in hidden_states per "
"label, aka len(hidden_states[layer]) == 2 * len(train_choices). For "
"example, if n_difference=1, then hidden_states here should be the raw "
"hidden states rather than the relative (i.e. the differences between "
"pairs of examples)."
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_readers.PCARepReader.get_signs:11
#: panda_guard.role.defenses.repe_utils.rep_readers.RepReader.get_signs:11
msgid "Labels for the training data"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_readers.PCARepReader.get_signs:14
#: panda_guard.role.defenses.repe_utils.rep_readers.RepReader.get_signs:14
msgid "A dict mapping layers to sign arrays (n_components,)"
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.RandomRepReader:1
msgid ""
"Get random directions for each hidden layer. Do not use hidden states or "
"train labels of any kind."
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.RepReader:1
msgid "Bases: :py:class:`~abc.ABC`"
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.RepReader:1
msgid "Class to identify and store concept directions."
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.RepReader:3
msgid ""
"Subclasses implement the abstract methods to identify concept directions "
"for each hidden layer via strategies including PCA, embedding vectors "
"(aka the logits method), and cluster means."
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.RepReader:7
msgid "RepReader instances are used by RepReaderPipeline to get concept scores."
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.RepReader:9
msgid "Directions can be used for downstream interventions."
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.RepReader.transform:1
msgid "Project the hidden states onto the concept directions in self.directions"
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.RepReader.transform:3
msgid "dictionary with entries of dimension (n_examples, hidden_size)"
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.RepReader.transform:4
msgid "list of layers to consider"
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.RepReader.transform:5
msgid "index of the component to use from self.directions"
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.RepReader.transform:7
msgid "dictionary with entries of dimension (n_examples,)"
msgstr ""

#: of panda_guard.role.defenses.repe_utils.rep_readers.project_onto_direction:1
msgid "Project matrix H (n, d_1) onto direction vector (d_2,)"
msgstr ""

#: ../../source/panda_guard.role.defenses.repe_utils.rst:40
msgid "panda\\_guard.role.defenses.repe\\_utils.rep\\_reading\\_pipeline module"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_reading_pipeline.RepReadingPipeline:1
msgid "Bases: :py:class:`~transformers.pipelines.base.Pipeline`"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_reading_pipeline.RepReadingPipeline.get_directions:1
msgid ""
"Train a RepReader on the training data. :param batch_size: batch size to "
"use when getting hidden states :param direction_method: string specifying"
" the RepReader strategy for finding directions :param "
"direction_finder_kwargs: kwargs to pass to RepReader constructor"
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_reading_pipeline.RepReadingPipeline.postprocess:1
msgid ""
"Postprocess will receive the raw outputs of the `_forward` method, "
"generally tensors, and reformat them into something more friendly. "
"Generally it will output a list or a dict or results (containing just "
"strings and numbers)."
msgstr ""

#: of
#: panda_guard.role.defenses.repe_utils.rep_reading_pipeline.RepReadingPipeline.preprocess:1
msgid ""
"Preprocess will take the `input_` of a specific pipeline and return a "
"dictionary of everything necessary for `_forward` to run properly. It "
"should contain at least one tensor, but might have arbitrary other items."
msgstr ""

#: ../../source/panda_guard.role.defenses.repe_utils.rst:48
msgid "Module contents"
msgstr ""

